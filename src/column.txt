{
    id: 'routingGuide',
    accessor: (row) => ({lanePolicyName: row.lane_policy_name, lanePolicyId: row.lane_policy_id}),
    Header: 'Routing Guide',
    Cell: ({
      value
    }: {
      value: {lanePolicyName: RfpRowResponse['lane_policy_name']; lanePolicyId: RfpRowResponse['lane_policy_id']};
    }) => {
      const [showModal, setShowModal] = useState(false);
      return (
        <>
          <Button onClick={() => setShowModal(true)} variant="tertiary">
            {value.lanePolicyName}
          </Button>
          <Modal
            show={showModal}
            title="Push to Routing Guide"
            footerComponent={null}
            onClose={() => setShowModal(false)}
            portal>
            <DisplayValue label="Routing Guide Name">{value.lanePolicyName}</DisplayValue>
            <RoutingGuidePolicyDetails policy={{}} />
            <Card title="Actions" isCollapsible={false} draggableProvided={() => undefined}>
              <p>Actions go here</p>
              {/* <Card
                  key={action.id}
                  title={
                    <RoutingGuideActionSummary
                      index={index}
                      values={carrierCapacityAvailabilityQuery.data}
                      capacityAvailable={action.capacityAvailable}
                      showCarrierCapacityError={showCarrierCapacityError}
                    />
                  }
                  isCollapsible
                  isCollapsed>
                  <CollapsibleCardContent>
                    <RoutingGuideActionDetails action={action} selectedShipment={selectedShipment} />
                  </CollapsibleCardContent>
                </Card> */}
            </Card>
            <FlexBox justify="end" gap="m" pad={['t', 'm']}>
              <Button onClick={() => setShowModal(false)} variant="secondary">
                Close
              </Button>
              <Button variant="primary">Manage Routing Guide</Button>
            </FlexBox>
          </Modal>
        </>
      );
    }
  }